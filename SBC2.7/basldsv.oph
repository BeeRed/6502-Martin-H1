;******** LOAD & SAVE PATCH FOR ENHANCED BASIC
; Daryl Rictor, Feb 2009
; Modified 3/2014, Richard Cini for IECBasic.
;

;ibuffs+1 contains the name, no quotes
;Some form of delimiter is needed between keyword and string...
;	...a space or quote works fine.
; Probably need to write new alphanumeric test routine

psave:
	ldx #$00
	ldy #$00
	lda ibuffs+1		; ibuffs is BASIC input buffer
	stz ibuffs+1		; this fixes syntax error in ehbasic
	bne psave15
	rts 

psave1:
	lda ibuffs+1,x
	stz ibuffs+1,x		; this fixes syntax error in ehbasic
	beq psave3		; done copying name to buffer...continue

psave15:
	jsr IsValidChar		; ensure it's an alphanumeric character
	bcc psnotsvchr		; not alpha, skip it
	sta FNM1,y		; starts at $028e
	iny 
;	sta	FNM1,x		; starts at $028e
	inx 
	cpy #$11		; 16 characters
;	cpx	#$11		; 16 characters
	bcc psave1
	rts 		; entry too long, abort

psnotsvchr:
	inx 		; go to next char in command buffer
	bra psave1

psave3:		; this is where all the saving occurs
	lda #$00		; zero-terminate the string for printing
	iny 
	sta FNM1,y
;	sta	FNM1,x
	lda #$08		; default to unit 8
	sta CMD_DEV		; save default device for current command
;	txa			; move string length to .A
	dey 		; remove 0-term from count
	tya 
	ldx #<FNM1		; get pointer to filename low
	ldy #>FNM1		; get pointer to filename high
;*****
;	BRK
;*****
	JSR SETNAM		; set the filename string

	LDA #$FD		; handle
	LDX CMD_DEV		; device
	LDY #$00		; SA
	JSR SETLFS		; set logical file parameters

	ldx Smeml		; set...LSB of start-of-basic
	ldy Smemh		; set...MSB to start-of-basic
	clc 
	jsr MEMBOT		; set bottom of memory

	LDA #$03		; offset to ZPage pointer
		; offset is OSSTAR ($17) - USRPOK ($14)
	LDX svarl		; LSB of "to"
	dex 		; ending address is variable_start-1
	LDY svarh		; MSB of "to"
	JSR IECSAVE		; save it!
	rts 		; return to BASIC


pload:
	ldx #$00
	lda ibuffs+1
	stz ibuffs+1		; this fixes syntax error in ehbasic
	bne pload15
	rts 

pload1:
	lda ibuffs+1,x
	beq pload3

pload15:
	jsr IsValidChar		; ensure it's an alphanumeric character
	bcc psnotldchr		; not alpha, skip it
	sta FNM1,y		; starts at $028e
	iny 
;	sta	FNM1,x		; starts at $028e
	inx 
	cpy #$11		; 16 characters
;	cpx	#$11		; 16 characters
	bcc pload1
	rts 		; entry too long, abort

psnotldchr:
	inx 		; go to next char in command buffer
	bra pload1

pload3:
	lda #$00		; zero-terminate the string for printing
	iny 
	sta FNM1,y
;	sta	FNM1,x
	lda #$08		; default to unit 8
	sta CMD_DEV		; save default device for current command
;	txa			; move string length to .A
	dey 		; remove 0-term from count
	tya 
	ldx #<FNM1		; get pointer to filename low
	ldy #>FNM1		; get pointer to filename high
;*****
;	BRK
;*****
	JSR SETNAM		; set the filename string

	LDA #$FD		; handle
	LDX CMD_DEV		; device
	LDY #$01		; SA=1 to take info from header; SA=0 for relocated load
	JSR SETLFS		; set logical file parameters

		; setup params and call LOAD
	ldx Smeml		; set...LSB of start-of-basic
	ldy Smemh		; set...MSB to start-of-basic
	clc 
	jsr MEMBOT		; set bottom of memory

	LDA #$00		; 0=load; 1=verify
	LDX #$ff		; LSB of "from" or FF for default from MEMBOT
	LDY #$ff		; MSB of "from"
	JSR IECLOAD		; returns highest loaded address in YYXX
	inx 
	stx Svarl
	sty Svarh
	jsr LAB_1477		; clear variables and set execution pointer
;	jsr	LAV_1319
	rts 		; return to BASIC


; This routine tests the character to see if it's a valid filename character
; Even though the disk device can have graphics characters in the filename,
;	we limit the valid chars to alphanumeric.
IsValidChar:

	CMP #'A
	BCC svBadChar
	CMP #'Z+1
	BCC svGoodChar
	CMP #'a
	BCC svBadChar
	CMP #'z+1
	BCS svBadChar
	CMP #'0
	BCC svBadChar
	CMP #'9+1
	BCS svBadChar

svGoodChar:
	SEC 		; set carry on valid char
	rts 

svBadChar:
	CLC 		; clear carry on invalid char
	RTS 

; This routine tests the character to see if it's a valid character used
; in disk commands like RENAME, NEW and COPY (comma and equals).\
IsValidCmdStr:
	CMP #$2C		; comma for NEW/FORMAT
	BEQ CmdGoodChar
	CMP #$3d		; "=" for rename
	BEQ CmdGoodChar
	CMP #'0			; $30 - $39
	BCC CmdBadChar
	CMP #'9+1
	BCS CmdBadChar
	CMP #'A			; $41 - $5A
	BCC CmdBadChar
	CMP #'Z+1
	BCC CmdBadChar
	CMP #'a			; $61 - $7A
	BCC CmdBadChar
	CMP #'z+1
	BCS CmdBadChar

CmdGoodChar:
	SEC 		; set carry on valid char
	rts 

CmdBadChar:
	CLC 		; clear carry on invalid char
	RTS 

AA_end_basldsv:
